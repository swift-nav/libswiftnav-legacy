import prelude;

static givens (a :: double) (b :: double) :: double[2,2] := (
  c :: double;
  s :: double;
  if b == 0 then (
    c <- 1; s <- 0
  ) else if fabs b > fabs a then (
    tau := -a/b; s <- 1/sqrt(1+tau*tau); c <- s*tau
  ) else (
    tau := -b/a; c <- 1/sqrt(1+tau*tau); s <- c*tau;
  );

  mat( c, s ;
      -s, c );
);

-- Assumes m >= n
-- See "Matrix Computations" 4th ed. Golub and Van Loan
qr_solve {m, n}
  (inout A :: double[m, n])
  (inout b :: double[m])

  (out solution :: double[n])
  (out residual :: double)

  :: s8 := (

  qr_update (inout b) (inout A);

  -- A is now upper triangular; backsolve it into b
  code := backsolve A[0:n, 0:n] (inout b[0:n]);

  -- Solution stored in first n elements
  solution <- b[0:n];

  -- Norm of error = norm of last m-n elements
  residual <- norm b[n:m];

  return code;
);

qr_update {m, n}
  (inout b :: double[m])
  (inout A :: double[m, n])
  :: Void := (

    for j in 1 .. n,
        i in m .. j+1 : -1 -> (

      -- Givens rotation
      rot := givens A[i-2,j-1] A[i-1,j-1];
      -- Rotate one column at a time
      for k in j..n -> (
        v := A[i-2 .. i-1, k-1];
        A[i-2 .. i-1, k-1] <- rot^T * v;
      );

      -- Rotate b vector
      v := b[i-2 .. i-1];
      b[i-2 .. i-1] <- rot^T * v;

  );
);

-- Back substitution for upper triangular U
static backsolve {n}
  (U :: double[n,n])
  (inout b :: double[n])
  :: s8 := (
    for i in 0:n ->
      if U[i,i] == 0 then
        return -1;

    b[n-1] <- b[n-1]/U[n-1, n-1];

    for i in n-1 .. 1 : -1 -> (
      b[i-1] <- (b[i-1] - U[i-1, i : n] * b[i : n]) / U[i-1, i-1];
    );

    return 0;
);
