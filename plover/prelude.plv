-- prelude.plv
-- The standard library for plover


__C__ "#include <assert.h>";

---
--- Integers
---
__C__
  "\n#include <stdint.h>\n\
  \#include <stdbool.h>\n\
  \#include <inttypes.h>\n\
  \#ifndef COMMON_INT_TYPES\n\
  \#define COMMON_INT_TYPES\n\
  \/** \\defgroup common_inttypes Integer types\n\
  \ * Specified-width integer type definitions for shorter and nicer code.\n\
  \ *\n\
  \ * These should be used in preference to unspecified width types such as\n\
  \ * `int` which can lead to portability issues between different platforms.\n\
  \ * \\{ */\n\
  \\n\
  \/** Signed 8-bit integer. */\n\
  \typedef int8_t s8;\n\
  \/** Signed 16-bit integer. */\n\
  \typedef int16_t s16;\n\
  \/** Signed 32-bit integer. */\n\
  \typedef int32_t s32;\n\
  \/** Signed 64-bit integer. */\n\
  \typedef int64_t s64;\n\
  \/** Unsigned 8-bit integer. */\n\
  \typedef uint8_t u8;\n\
  \/** Unsigned 16-bit integer. */\n\
  \typedef uint16_t u16;\n\
  \/** Unsigned 32-bit integer. */\n\
  \typedef uint32_t u32;\n\
  \/** Unsigned 64-bit integer. */\n\
  \typedef uint64_t u64;\n\
  \\n\
  \#endif\n\
  \\n\
  \/** \\} */";

---
--- Floats
---
__C__
  "\n#include <float.h>";

---
--- stdio.h
---

__C__ "#include <stdio.h>";
extern (
  printf (x :: string) __VARARGS__ :: int;
);


---
--- stdlib.h
---

__C__ "#include <stdlib.h>";
extern (
  struct div_t (
    quot :: int;
    rem :: int;
  );
  RAND_MAX :: int;
  -- skipping __compar_fn_t
  abort :: ();
  abs (i :: int) :: int;
  -- skipping bsearch
  div (n :: int) (denom :: int) :: div_t;
  -- skipping ldiv
  -- skipping qsort
  strtol (nptr :: string) (inout endptr :: string) (base :: int) :: int;
  strtoul (nptr :: string) (inout endptr :: string) (base :: int) :: u32; -- unsigned long
  atol (s :: string) :: int; -- long
  atoi (s :: string) :: int;
  exit (status :: int) :: ();
  -- skipping malloc, free, calloc, realloc
  strtod (nptr :: string) (inout endptr :: string) :: double;
  atof (s :: string) :: double;
  rand () :: int;
  srand (seed :: u32) :: ();
  rand_r (ctxt :: *u32) :: int; -- argument is unsigned long

  -- non-standard
--  random () :: int; -- long
--  srandom (seed :: u32) :: (); -- u32 is unsigned long
--  random_r (ctxt :: *u32) :: int; -- u32 is unsigned long
--  RANDOM_MAX :: int;
);

---
--- math.h
---

__C__ "#include <math.h>";
extern (
  fpclassify (x :: double) :: int;
  FP_INFINITE :: int;
  FP_NAN :: int;
  FP_NORMAL :: int;
  FP_SUBNORMAL :: int;
  FP_ZERO :: int;

  isfinite (x :: double) :: bool;
  isgreater (x :: double) (y :: double) :: bool;
  isgreaterequal (x :: double) (y :: double) :: bool;
  isinf (x :: double) :: bool;
  isless (x :: double) (y :: double) :: bool;
  islessequal (x :: double) (y :: double) :: bool;
  islessgreater (x :: double) (y :: double) :: bool;
  isnan (x :: double) :: bool;
  isnormal (x :: double) :: bool;
  isunordered (x :: double) :: bool;
  signbit (x :: double) :: bool;

  M_E :: double;
  M_LOG2E :: double;
  M_LOG10E :: double;
  M_LN2 :: double;
  M_LN10 :: double;
  M_PI :: double;
  M_PI_2 :: double;
  M_PI_4 :: double;
  M_1_PI :: double;
  M_2_PI :: double;
  M_2_SQRTPI :: double;
  M_SQRT2 :: double;
  M_SQRT_1_2 :: double;

  FP_ILOGB0 :: int;
  FP_ILOGBNAN :: int;

  acos (x :: double) :: double;
  acosf (x :: float) :: float;
  acosh (x :: double) :: double;
  acoshf (x :: float) :: float;
  asin (x :: double) :: double;
  asinf (x :: float) :: float;
  asinh (x :: double) :: double;
  asinhf (x :: float) :: float;
  atan (x :: double) :: double;
  atan2 (x :: double) (y :: double) :: double;
  atan2f (x :: float) (y :: float) :: float;
  atanf (x :: float) :: float;
  atanh (x :: double) :: double;
  atanhf (x :: float) :: float;
  cbrt (x :: double) :: double;
  cbrtf (x :: float) :: float;
  ceil (x :: double) :: double;
  ceilf (x :: float) :: float;
  copysign (x :: double) (y :: double) :: double;
  copysignf (x :: float) (y :: float) :: float;
  cos (x :: double) :: double;
  cosf (x :: float) :: float;
  cosh (x :: double) :: double;
  coshf (x :: float) :: float;
  erf (x :: double) :: double;
  erfc (x :: double) :: double;
  erfcf (x :: float) :: float;
  erff (x :: float) :: float;
  exp (x :: double) :: double;
  exp2 (x :: double) :: double;
  exp2f (x :: float) :: float;
  expf (x :: float) :: float;
  expm1 (x :: double) :: double;
  expm1f (x :: float) :: float;
  fabs (x :: double) :: double;
  fabsf (x :: float) :: float;
  fdim (x :: double) (y :: double) :: double;
  fdimf (x :: float) (y :: float) :: float;
  floor (x :: double) :: double;
  floorf (x :: float) :: float;
  fma (x :: double) (y :: double) (z :: double) :: double;
  fmaf (x :: float) (y :: float) (z :: float) :: float;
  fmax (x :: double) (y :: double) :: double;
  fmaxf (x :: float) (y :: float) :: float;
  fmin (x :: double) (y :: double) :: double;
  fminf (x :: float) (y :: float) :: float;
  fmod (x :: double) (y :: double) :: double;
  fmodf (x :: float) (y :: float) :: float;
  frexp (x :: double) (out y :: int) :: double;
  frexpf (x :: float) (out y :: int) :: float;
  hypot (x :: double) (y :: double) :: double;
  hypotf (x :: float) (y :: float) :: float;
  ilogb (x :: double) :: int;
  ilogbf (x :: float) :: int;
  j0 (x :: double) :: double;
  j1 (x :: double) :: double;
  jn (x :: int) (y :: double) :: double;
  ldexp (x :: double) (y :: int) :: double;
  ldexpf (x :: float) (y :: int) :: float;
  lgamma (x :: double) :: double;
  lgammaf (x :: float) :: float;
  llrint (x :: double) :: s64;
  llrintf (x :: float) :: s64;
  llround (x :: double) :: s64;
  llroundf (x :: float) :: s64;
  log (x :: double) :: double;
  log10 (x :: double) :: double;
  log10f (x :: float) :: float;
  log1p (x :: double) :: double;
  log1pf (x :: float) :: float;
  log2 (x :: double) :: double;
  log2f (x :: float) :: float;
  logb (x :: double) :: double;
  logbf (x :: float) :: float;
  logf (x :: float) :: float;
  lrint (x :: double) :: s32;
  lrintf (x :: float) :: s32;
  lround (x :: double) :: s32;
  lroundf (x :: float) :: s32;
  modf (x :: double) (out y :: double) :: double;
  modff (x :: float) (out y :: float) :: float;
  nan (x :: string) :: double;
  nanf (x :: string) :: float;
  nearbyint (x :: double) :: double;
  nearbyintf (x :: float) :: float;
  nextafter (x :: double) (y :: double) :: double;
  nextafterf (x :: float) (y :: float) :: float;
  pow (x :: double) (y :: double) :: double;
  powf (x :: float) (y :: float) :: float;
  remainder (x :: double) (y :: double) :: double;
  remainderf (x :: float) (y :: float) :: float;
  remquo (x :: double) (y :: double) (out z :: int) :: double;
  remquof (x :: float) (y :: float) (out z :: int) :: float;
  rint (x :: double) :: double;
  rintf (x :: float) :: float;
  round (x :: double) :: double;
  roundf (x :: float) :: float;
  scalbln (x :: double) (y :: s32) :: double;
  scalblnf (x :: float) (y :: s32) :: float;
  scalbn (x :: double) (y :: int) :: double;
  scalbnf (x :: float) (y :: int) :: float;
  sin (x :: double) :: double;
  sinf (x :: float) :: float;
  sinh (x :: double) :: double;
  sinhf (x :: float) :: float;
  sqrt (x :: double) :: double;
  sqrtf (x :: float) :: float;
  tan (x :: double) :: double;
  tanf (x :: float) :: float;
  tanh (x :: double) :: double;
  tanhf (x :: float) :: float;
  tgamma (x :: double) :: double;
  tgammaf (x :: float) :: float;
  trunc (x :: double) :: double;
  truncf (x :: float) :: float;
  y0 (x :: double) :: double;
  y1 (x :: double) :: double;
  yn (x :: int) (y :: double) :: double;
  signgam :: int;
);

extern ipow (base :: int) (exp :: int) :: int;
__C__ "int ipow(int base, int exp);";
static __C__ "int ipow(int base, int exp) {\n\
\  int result = 1;\n\
\  while (exp) {\n\
\    if (exp & 1)  result *= base;\n\
\    exp >>= 1;\n\
\    base *= base;\n\
\  }\n\
\  return result;\n\
\}";
extern dipow (base :: double) (exp :: int) :: double;
__C__ "double dipow(double base, int exp);";
static __C__ "double dipow(double base, int exp) {\n\
\  double result = 1;\n\
\  while (exp) {\n\
\    if (exp & 1)  result *= base;\n\
\    exp >>= 1;\n\
\    base *= base;\n\
\  }\n\
\  return result;\n\
\}";


-- Generates a uniform random double from 0 to 1, saturating all
-- mantissa bits.  bits.  Computes it by taking a random double in
-- [1,2) then subtracting 1.
extern rand_uniform() :: double;
__C__ "double rand_uniform(void);";
static __C__ "double rand_uniform(void) {\n\
\  union { double d; u64 i; } di;\n\
\  di.i = 0;\n\
\  const int width = 32 - __builtin_clz((u32)RAND_MAX);\n\
\  for (int j = 0; j < DBL_MANT_DIG; j += width) {\n\
\    di.i = (di.i << width) | rand();\n\
\  }\n\
\  di.i = (di.i << (64 - DBL_MANT_DIG)) >> (64 - DBL_MANT_DIG);\n\
\  di.i |= 0x3ff0000000000000; // zero exponent\n\
\  return di.d-1;\n\
\}";

-- Computes a random normally-distributed number using the Box-Muller
-- transform.
-- Source: http://www.design.caltech.edu/erik/Misc/Gaussian.html
rand_normal() :: double
  := (x1 :: double; x2 :: double;
      w :: double;
      while (x1 <- 2 * rand_uniform() - 1.0;
             x2 <- 2 * rand_uniform() - 1.0;
             w <- x1 ^ 2 + x2 ^ 2;
             w >= 1.0);
      w <- sqrt( -2 * log w / w );
      return x1 * w;
      -- waste x2 * w;
     );

---
--- Vector stuff
---
static __C__ "#define MATRIX_EPSILON (1e-60)";
extern MATRIX_EPSILON :: double;


norm {n} (v :: double[n]) :: double
  := sqrt (v * v);
normalize {n} (v :: double[n]) :: double[n]
  := v / norm v;

print_vec {n} (v :: double[n]) :: () := (
  printf "vec(";
  for i in n -> (
    if i > 0 then printf "," else 0;
    printf "% 12lf" v[i];
  );
  printf ")\n";
  ();
);

print_mat {n,m} (A :: double[n,m]) :: () := (
  printf "mat(";
   for i in n -> (
     if i > 0 then printf ";\n    " else 0;
     for j in m -> (
       if j > 0 then printf "," else 0;
       printf "% 12lf" A[i,j];
     );
   );
   printf ")\n";
   ();
);


matrix_inv {n} (A :: double[n,n]) (out B :: double[n, n]) :: int
  := specialize n (
       0 -> 0; -- then B is already set. it's technically an inverse
       1 -> inv1 A (out B);
       2 -> inv2 A (out B);
       3 -> inv3 A (out B);
       4 -> inv4 A (out B);
       _ -> gen_inv_qr A (out B);
     );

det {n} (A :: double[n,n]) :: double
  := specialize n (
       0 -> 1;
       1 -> A[0,0];
       2 -> det2 A;
       3 -> det3 A;
       4 -> det4 A;
       _ -> gen_det_qr A;
     );

static (
  inv1 (A :: double[1,1]) (out B :: double[1,1]) :: int
    := ( if fabs A[0,0] < MATRIX_EPSILON then return -1;
         B <- mat( 1 / A[0, 0] );
         return 0;
       );
  det2 (A :: double[2,2]) :: double
    := A[0,0] * A[1,1] - A[0,1] * A[1,0];
  inv2 (A :: double[2,2]) (out B :: double[2,2]) :: int
    := ( d := det2 A;
         if fabs d < MATRIX_EPSILON then return -1;

         B <- mat( A[1,1] / d, -A[0,1] / d;
                  -A[1,0] / d,  A[0,0] / d);

         return 0;
       );
  det3 (A :: double[3,3]) :: double
    := -A[1,0] * (A[0,1] * A[2,2] - A[0,2] * A[2,1])
       +A[1,1] * (A[0,0] * A[2,2] - A[0,2] * A[2,0])
       -A[1,2] * (A[0,0] * A[2,1] - A[0,1] * A[2,0]);
  inv3 (A :: double[3,3]) (out B :: double[3,3]) :: int
    := ( d := det3 A;
         if fabs d < MATRIX_EPSILON then return -1;

         B[0,0] <- (A[1,1]*A[2,2]-A[1,2]*A[2,1])/d;
         B[1,0] <- -(A[1,0]*A[2,2]-A[1,2]*A[2,0])/d;
         B[2,0] <- (A[1,0]*A[2,1]-A[1,1]*A[2,0])/d;

         B[0,1] <- -(A[0,1]*A[2,2]-A[0,2]*A[2,1])/d;
         B[1,1] <- (A[0,0]*A[2,2]-A[0,2]*A[2,0])/d;
         B[2,1] <- -(A[0,0]*A[2,1]-A[0,1]*A[2,0])/d;

         B[0,2] <- (A[0,1]*A[1,2]-A[0,2]*A[1,1])/d;
         B[1,2] <- -(A[0,0]*A[1,2]-A[0,2]*A[1,0])/d;
         B[2,2] <- (A[0,0]*A[1,1]-A[0,1]*A[1,0])/d;

         return 0;
       );

  det4 (A :: double[4,4]) :: double
    := A[1,0]*(A[2,1]*(A[0,2]*A[3,3]-A[0,3]*A[3,2])
                 -A[2,2]*(A[0,1]*A[3,3]-A[0,3]*A[3,1])
                 +A[2,3]*(A[0,1]*A[3,2]-A[0,2]*A[3,1]))
    -A[1,1]*(A[2,0]*(A[0,2]*A[3,3]-A[0,3]*A[3,2])
               -A[2,2]*(A[0,0]*A[3,3]-A[0,3]*A[3,0])
               +A[2,3]*(A[0,0]*A[3,2]-A[0,2]*A[3,0]))
    +A[1,2]*(A[2,0]*(A[0,1]*A[3,3]-A[0,3]*A[3,1])
               -A[2,1]*(A[0,0]*A[3,3]-A[0,3]*A[3,0])
               +A[2,3]*(A[0,0]*A[3,1]-A[0,1]*A[3,0]))
    -A[1,3]*(A[2,0]*(A[0,1]*A[3,2]-A[0,2]*A[3,1])
               -A[2,1]*(A[0,0]*A[3,2]-A[0,2]*A[3,0])
               +A[2,2]*(A[0,0]*A[3,1]-A[0,1]*A[3,0]));

  inv4 (A :: double[4,4]) (out B :: double[4,4]) :: int
    := ( d := det4 A;
         if fabs d < MATRIX_EPSILON then return -1;

         B[0,0] <- (-A[2,1]*(A[1,2]*A[3,3]-A[1,3]*A[3,2])
                      +A[2,2]*(A[1,1]*A[3,3]-A[1,3]*A[3,1])
                      -A[2,3]*(A[1,1]*A[3,2]-A[1,2]*A[3,1]))/d;
         B[1,0] <- -(-A[2,0]*(A[1,2]*A[3,3]-A[1,3]*A[3,2])
                       +A[2,2]*(A[1,0]*A[3,3]-A[1,3]*A[3,0])
                       -A[2,3]*(A[1,0]*A[3,2]-A[1,2]*A[3,0]))/d;
         B[2,0] <- (-A[2,0]*(A[1,1]*A[3,3]-A[1,3]*A[3,1])
                      +A[2,1]*(A[1,0]*A[3,3]-A[1,3]*A[3,0])
                      -A[2,3]*(A[1,0]*A[3,1]-A[1,1]*A[3,0]))/d;
         B[3,0] <- -(-A[2,0]*(A[1,1]*A[3,2]-A[1,2]*A[3,1])
                       +A[2,1]*(A[1,0]*A[3,2]-A[1,2]*A[3,0])
                       -A[2,2]*(A[1,0]*A[3,1]-A[1,1]*A[3,0]))/d;

         B[0,1] <- -(-A[2,1]*(A[0,2]*A[3,3]-A[0,3]*A[3,2])
                       +A[2,2]*(A[0,1]*A[3,3]-A[0,3]*A[3,1])
                       -A[2,3]*(A[0,1]*A[3,2]-A[0,2]*A[3,1]))/d;
         B[1,1] <- (-A[2,0]*(A[0,2]*A[3,3]-A[0,3]*A[3,2])
                      +A[2,2]*(A[0,0]*A[3,3]-A[0,3]*A[3,0])
                      -A[2,3]*(A[0,0]*A[3,2]-A[0,2]*A[3,0]))/d;
         B[2,1] <- -(-A[2,0]*(A[0,1]*A[3,3]-A[0,3]*A[3,1])
                       +A[2,1]*(A[0,0]*A[3,3]-A[0,3]*A[3,0])
                       -A[2,3]*(A[0,0]*A[3,1]-A[0,1]*A[3,0]))/d;
         B[3,1] <- (-A[2,0]*(A[0,1]*A[3,2]-A[0,2]*A[3,1])
                      +A[2,1]*(A[0,0]*A[3,2]-A[0,2]*A[3,0])
                      -A[2,2]*(A[0,0]*A[3,1]-A[0,1]*A[3,0]))/d;

         B[0,2] <- (-A[1,1]*(A[0,2]*A[3,3]-A[0,3]*A[3,2])
                      +A[1,2]*(A[0,1]*A[3,3]-A[0,3]*A[3,1])
                      -A[1,3]*(A[0,1]*A[3,2]-A[0,2]*A[3,1]))/d;
         B[1,2] <- -(-A[1,0]*(A[0,2]*A[3,3]-A[0,3]*A[3,2])
                       +A[1,2]*(A[0,0]*A[3,3]-A[0,3]*A[3,0])
                       -A[1,3]*(A[0,0]*A[3,2]-A[0,2]*A[3,0]))/d;
         B[2,2] <- (-A[1,0]*(A[0,1]*A[3,3]-A[0,3]*A[3,1])
                      +A[1,1]*(A[0,0]*A[3,3]-A[0,3]*A[3,0])
                      -A[1,3]*(A[0,0]*A[3,1]-A[0,1]*A[3,0]))/d;
         B[3,2] <- -(-A[1,0]*(A[0,1]*A[3,2]-A[0,2]*A[3,1])
                       +A[1,1]*(A[0,0]*A[3,2]-A[0,2]*A[3,0])
                       -A[1,2]*(A[0,0]*A[3,1]-A[0,1]*A[3,0]))/d;

         B[0,3] <- -(-A[1,1]*(A[0,2]*A[2,3]-A[0,3]*A[2,2])
                       +A[1,2]*(A[0,1]*A[2,3]-A[0,3]*A[2,1])
                       -A[1,3]*(A[0,1]*A[2,2]-A[0,2]*A[2,1]))/d;
         B[1,3] <- (-A[1,0]*(A[0,2]*A[2,3]-A[0,3]*A[2,2])
                      +A[1,2]*(A[0,0]*A[2,3]-A[0,3]*A[2,0])
                      -A[1,3]*(A[0,0]*A[2,2]-A[0,2]*A[2,0]))/d;
         B[2,3] <- -(-A[1,0]*(A[0,1]*A[2,3]-A[0,3]*A[2,1])
                       +A[1,1]*(A[0,0]*A[2,3]-A[0,3]*A[2,0])
                       -A[1,3]*(A[0,0]*A[2,1]-A[0,1]*A[2,0]))/d;
         B[3,3] <- (-A[1,0]*(A[0,1]*A[2,2]-A[0,2]*A[2,1])
                      +A[1,1]*(A[0,0]*A[2,2]-A[0,2]*A[2,0])
                      -A[1,2]*(A[0,0]*A[2,1]-A[0,1]*A[2,0]))/d;

         return 0;
       );

  givens (a :: double) (b :: double) :: double[2,2] := (
    c := 0.0;
    s := 0.0;
    if b == 0 then (
      c <- 1; s <- 0
    ) else if fabs b > fabs a then (
      tau := -a/b; s <- 1/sqrt(1+tau*tau); c <- s*tau
    ) else (
      tau := -b/a; c <- 1/sqrt(1+tau*tau); s <- c*tau;
    );
    mat( c, s ;
        -s, c );
  );

  -- | Compute the determinant by doing part of the QR factorization,
  -- then multiplying the elements of the diagonal.
  gen_det_qr {n} (U :: double[n,n]) :: double := (
    A := U;
    -- do QR factorization
    for j in 1 .. n,
        i in n .. j+1 : -1 -> (
      rot := givens A[i-2,j-1] A[i-1,j-1];
      -- Rotate one column at a time
      for k in j .. n -> (
        v := A[i-2 .. i-1, k-1];
        A[i-2 .. i-1, k-1] <- rot^T * v;
      );
    );
    -- multiply diagonal since now A is upper triangular
    d := 1.0;
    for i in 0:n -> (
      d <- d * A[i,i];
    );
    return d;
  );

  -- | Computes the general inverse of a matrix U by applying the
  -- transforms from the QR decomposition to an identity matrix
  gen_inv_qr {n} (U :: double[n,n]) (out B :: double[n,n]) :: int := (
    -- Initialize B to identity matrix
    A := U;
    B <- vec i in n, j in n -> if i == j then 1 else 0;
    -- do QR factorization
    for j in 1 .. n,
        i in n .. j+1 : -1 -> (
      rot := givens A[i-2,j-1] A[i-1,j-1];
      -- Rotate one column at a time
      for k in j .. n -> (
        v := A[i-2 .. i-1, k-1];
        A[i-2 .. i-1, k-1] <- rot^T * v;
      );
      for k in 1 .. n -> (
        w := B[i-2 .. i-1, k-1];
        B[i-2 .. i-1, k-1] <- rot^T * w;
      );
    );
    -- Back substitution
    for i in 0:n -> (
      if A[i,i] == 0 then return -1;
      scale := A[i,i];
      A[i] <- A[i] / scale;
      B[i] <- B[i] / scale;
      for j in 0:i -> (
        c := A[j,i];
        A[j] <- A[j] - c * A[i];
        B[j] <- B[j] - c * B[i];
      );
    );
    return 0;
  );
);
